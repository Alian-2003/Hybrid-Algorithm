#include <iostream>
#include <vector>
#include <chrono> // For time measurement
#include <algorithm> // For reverse and shuffle
#include <random> // For random shuffle

// Insertion Sort for very small subarrays
void insertionSort(std::vector<int>& arr, int left, int right) {
    for (int i = left + 1; i <= right; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= left && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

// Partition for Quick Sort
int partition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Quick Sort with Insertion Sort for small arrays
void quickSort(std::vector<int>& arr, int low, int high) {
    if (low < high) {
        if (high - low + 1 < 20) { // Threshold for very small subarrays
            insertionSort(arr, low, high);
        } else {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }
}

// Merge function for Merge Sort
void merge(std::vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    std::vector<int> leftArr(n1);
    std::vector<int> rightArr(n2);

    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

// Merge Sort function
void mergeSort(std::vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Hybrid Sort: Switches between Merge Sort, Quick Sort, and Insertion Sort
void hybridSort(std::vector<int>& arr) {
    if (arr.size() < 50) {
        // For small arrays, use Quick Sort with Insertion Sort for very small partitions
        quickSort(arr, 0, arr.size() - 1);
    } else {
        // For larger arrays, use Merge Sort for reliable O(n log n) complexity
        mergeSort(arr, 0, arr.size() - 1);
    }
}

void measureTime(const std::vector<int>& arr, const std::string& caseType) {
    std::vector<int> arrCopy = arr; // Copy the array to avoid modifying the original

    auto start = std::chrono::high_resolution_clock::now();
    hybridSort(arrCopy);
    auto end = std::chrono::high_resolution_clock::now();

    // Calculate the duration in microseconds
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    std::cout << "Time taken by hybridSort for " << caseType << " case: " << duration.count() << " microseconds" << std::endl;
}

int main() {
    // Define array size and populate with sample data
    int n = 100; // Array size for testing
    std::vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        arr[i] = i + 1; // Best case: already sorted
    }

    // Best Case (Already Sorted)
    measureTime(arr, "Best");

    // Average Case (Random order)
    std::random_device rd;
    std::mt19937 g(rd());
    std::shuffle(arr.begin(), arr.end(), g); // Shuffle to create average case
    measureTime(arr, "Average");

    // Worst Case (Reverse Sorted)
    std::sort(arr.rbegin(), arr.rend()); // Sort in descending order for worst case
    measureTime(arr, "Worst");

    return 0;
}
